{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport Dropzone from \"dropzone\";\nimport { Controller } from \"stimulus\";\nimport { DirectUpload } from \"@rails/activestorage\";\nimport { getMetaValue, toArray, findElement, removeElement, insertAfter } from \"helpers\";\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function connect() {\n      this.dropZone = createDropZone(this);\n      this.hideFileInput();\n      this.bindEvents();\n      Dropzone.autoDiscover = false; // necessary quirk for Dropzone error in console\n    } //以下Privateメソッド\n\n  }, {\n    key: \"hideFileInput\",\n    value: function hideFileInput() {\n      this.inputTarget.disabled = true;\n      this.inputTarget.style.display = \"none\";\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      var _this = this;\n\n      this.dropZone.on(\"addedfile\", function (file) {\n        setTimeout(function () {\n          file.accepted && createDirectUploadController(_this, file).start();\n        }, 500);\n      });\n      this.dropZone.on(\"removedfile\", function (file) {\n        file.controller && removeElement(file.controller.hiddenInput);\n      });\n      this.dropZone.on(\"canceled\", function (file) {\n        file.controller && file.controller.xhr.abort();\n      });\n    }\n  }, {\n    key: \"headers\",\n    get: function get() {\n      return {\n        \"X-CSRF-Token\": getMetaValue(\"csrf-token\")\n      };\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this.inputTarget.getAttribute(\"data-direct-upload-url\");\n    }\n  }, {\n    key: \"maxFiles\",\n    get: function get() {\n      return this.data.get(\"maxFiles\") || 4;\n    }\n  }, {\n    key: \"maxFileSize\",\n    get: function get() {\n      return this.data.get(\"maxFileSize\") || 256;\n    }\n  }, {\n    key: \"acceptedFiles\",\n    get: function get() {\n      return this.data.get(\"acceptedFiles\");\n    }\n  }, {\n    key: \"addRemoveLinks\",\n    get: function get() {\n      return this.data.get(\"addRemoveLinks\") || true;\n    }\n  }, {\n    key: \"dictRemoveFile\",\n    get: function get() {\n      return this.data.get(\"dictRemoveFile\") || \"ファイルを削除\";\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"input\"];\nexport { _default as default };\n\nvar DirectUploadController = /*#__PURE__*/function () {\n  function DirectUploadController(source, file) {\n    _classCallCheck(this, DirectUploadController);\n\n    this.directUpload = createDirectUpload(file, source.url, this);\n    this.source = source;\n    this.file = file;\n  }\n\n  _createClass(DirectUploadController, [{\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      this.file.controller = this;\n      this.hiddenInput = this.createHiddenInput();\n      this.directUpload.create(function (error, attributes) {\n        if (error) {\n          removeElement(_this2.hiddenInput);\n\n          _this2.emitDropzoneError(error);\n        } else {\n          _this2.hiddenInput.value = attributes.signed_id;\n\n          _this2.emitDropzoneSuccess();\n        }\n      });\n    }\n  }, {\n    key: \"createHiddenInput\",\n    value: function createHiddenInput() {\n      var input = document.createElement(\"input\");\n      input.type = \"hidden\";\n      input.name = this.source.inputTarget.name;\n      insertAfter(input, this.source.inputTarget);\n      return input;\n    }\n  }, {\n    key: \"directUploadWillStoreFileWithXHR\",\n    value: function directUploadWillStoreFileWithXHR(xhr) {\n      this.bindProgressEvent(xhr);\n      this.emitDropzoneUploading();\n    }\n  }, {\n    key: \"bindProgressEvent\",\n    value: function bindProgressEvent(xhr) {\n      var _this3 = this;\n\n      this.xhr = xhr;\n      this.xhr.upload.addEventListener(\"progress\", function (event) {\n        return _this3.uploadRequestDidProgress(event);\n      });\n    }\n  }, {\n    key: \"uploadRequestDidProgress\",\n    value: function uploadRequestDidProgress(event) {\n      var element = this.source.element;\n      var progress = event.loaded / event.total * 100;\n      findElement(this.file.previewTemplate, \".dz-upload\").style.width = \"\".concat(progress, \"%\");\n    }\n  }, {\n    key: \"emitDropzoneUploading\",\n    value: function emitDropzoneUploading() {\n      this.file.status = Dropzone.UPLOADING;\n      this.source.dropZone.emit(\"processing\", this.file);\n    }\n  }, {\n    key: \"emitDropzoneError\",\n    value: function emitDropzoneError(error) {\n      this.file.status = Dropzone.ERROR;\n      this.source.dropZone.emit(\"error\", this.file, error);\n      this.source.dropZone.emit(\"complete\", this.file);\n    }\n  }, {\n    key: \"emitDropzoneSuccess\",\n    value: function emitDropzoneSuccess() {\n      this.file.status = Dropzone.SUCCESS;\n      this.source.dropZone.emit(\"success\", this.file);\n      this.source.dropZone.emit(\"complete\", this.file);\n    }\n  }]);\n\n  return DirectUploadController;\n}();\n\nfunction createDirectUploadController(source, file) {\n  return new DirectUploadController(source, file);\n}\n\nfunction createDirectUpload(file, url, controller) {\n  return new DirectUpload(file, url, controller);\n}\n\nfunction createDropZone(controller) {\n  return new Dropzone(controller.element, {\n    url: controller.url,\n    headers: controller.headers,\n    maxFiles: controller.maxFiles,\n    maxFilesize: controller.maxFileSize,\n    acceptedFiles: controller.acceptedFiles,\n    addRemoveLinks: controller.addRemoveLinks,\n    autoQueue: false\n  });\n}","map":{"version":3,"sources":["/Users/joe/My_app/Timmick/app/javascript/controllers/dropzone_controller.js"],"names":["Dropzone","Controller","DirectUpload","getMetaValue","toArray","findElement","removeElement","insertAfter","dropZone","createDropZone","hideFileInput","bindEvents","autoDiscover","inputTarget","disabled","style","display","on","file","setTimeout","accepted","createDirectUploadController","start","controller","hiddenInput","xhr","abort","getAttribute","data","get","targets","DirectUploadController","source","directUpload","createDirectUpload","url","createHiddenInput","create","error","attributes","emitDropzoneError","value","signed_id","emitDropzoneSuccess","input","document","createElement","type","name","bindProgressEvent","emitDropzoneUploading","upload","addEventListener","event","uploadRequestDidProgress","element","progress","loaded","total","previewTemplate","width","status","UPLOADING","emit","ERROR","SUCCESS","headers","maxFiles","maxFilesize","maxFileSize","acceptedFiles","addRemoveLinks","autoQueue"],"mappings":"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","sourcesContent":["import Dropzone from \"dropzone\";\nimport { Controller } from \"stimulus\";\nimport { DirectUpload } from \"@rails/activestorage\";\nimport {\n  getMetaValue,\n  toArray,\n  findElement,\n  removeElement,\n  insertAfter\n} from \"helpers\";\n\nexport default class extends Controller {\n  static targets = [\"input\"];\n\n  connect() {\n    this.dropZone = createDropZone(this);\n    this.hideFileInput();\n    this.bindEvents();\n    Dropzone.autoDiscover = false; // necessary quirk for Dropzone error in console\n  }\n\n  //以下Privateメソッド\n  \n  hideFileInput() {\n    this.inputTarget.disabled = true;\n    this.inputTarget.style.display = \"none\";\n  }\n\n  bindEvents() {\n    this.dropZone.on(\"addedfile\", file => {\n      setTimeout(() => {\n        file.accepted && createDirectUploadController(this, file).start();\n      }, 500);\n    });\n\n    this.dropZone.on(\"removedfile\", file => {\n      file.controller && removeElement(file.controller.hiddenInput);\n    });\n\n    this.dropZone.on(\"canceled\", file => {\n      file.controller && file.controller.xhr.abort();\n    });\n  }\n\n  get headers() {\n    return { \"X-CSRF-Token\": getMetaValue(\"csrf-token\") };\n  }\n\n  get url() {\n    return this.inputTarget.getAttribute(\"data-direct-upload-url\");\n  }\n\n  get maxFiles() {\n    return this.data.get(\"maxFiles\") || 4;\n  }\n\n  get maxFileSize() {\n    return this.data.get(\"maxFileSize\") || 256;\n  }\n\n  get acceptedFiles() {\n    return this.data.get(\"acceptedFiles\");\n  }\n\n  get addRemoveLinks() {\n    return this.data.get(\"addRemoveLinks\") || true;\n  }\n  \n  get dictRemoveFile() {\n    return this.data.get(\"dictRemoveFile\") || \"ファイルを削除\";\n  }\n}\n\nclass DirectUploadController {\n  constructor(source, file) {\n    this.directUpload = createDirectUpload(file, source.url, this);\n    this.source = source;\n    this.file = file;\n  }\n\n  start() {\n    this.file.controller = this;\n    this.hiddenInput = this.createHiddenInput();\n    this.directUpload.create((error, attributes) => {\n      if (error) {\n        removeElement(this.hiddenInput);\n        this.emitDropzoneError(error);\n      } else {\n        this.hiddenInput.value = attributes.signed_id;\n        this.emitDropzoneSuccess();\n      }\n    });\n  }\n\n  createHiddenInput() {\n    const input = document.createElement(\"input\");\n    input.type = \"hidden\";\n    input.name = this.source.inputTarget.name;\n    insertAfter(input, this.source.inputTarget);\n    return input;\n  }\n\n  directUploadWillStoreFileWithXHR(xhr) {\n    this.bindProgressEvent(xhr);\n    this.emitDropzoneUploading();\n  }\n\n  bindProgressEvent(xhr) {\n    this.xhr = xhr;\n    this.xhr.upload.addEventListener(\"progress\", event =>\n      this.uploadRequestDidProgress(event)\n    );\n  }\n\n  uploadRequestDidProgress(event) {\n    const element = this.source.element;\n    const progress = (event.loaded / event.total) * 100;\n    findElement(\n      this.file.previewTemplate,\n      \".dz-upload\"\n    ).style.width = `${progress}%`;\n  }\n\n  emitDropzoneUploading() {\n    this.file.status = Dropzone.UPLOADING;\n    this.source.dropZone.emit(\"processing\", this.file);\n  }\n\n  emitDropzoneError(error) {\n    this.file.status = Dropzone.ERROR;\n    this.source.dropZone.emit(\"error\", this.file, error);\n    this.source.dropZone.emit(\"complete\", this.file);\n  }\n\n  emitDropzoneSuccess() {\n    this.file.status = Dropzone.SUCCESS;\n    this.source.dropZone.emit(\"success\", this.file);\n    this.source.dropZone.emit(\"complete\", this.file);\n  }\n}\n\nfunction createDirectUploadController(source, file) {\n  return new DirectUploadController(source, file);\n}\n\nfunction createDirectUpload(file, url, controller) {\n  return new DirectUpload(file, url, controller);\n}\n\nfunction createDropZone(controller) {\n  return new Dropzone(controller.element, {\n    url: controller.url,\n    headers: controller.headers,\n    maxFiles: controller.maxFiles,\n    maxFilesize: controller.maxFileSize,\n    acceptedFiles: controller.acceptedFiles,\n    addRemoveLinks: controller.addRemoveLinks,\n    autoQueue: false\n  });\n}"]},"metadata":{},"sourceType":"module"}